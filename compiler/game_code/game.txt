# 0-44: moles {index, state, time_elapsed, time_limit_on, time_limit_off}
# $t12 = Game State Reg,   1 = Whack-A-Mole loop, 0 = Whack-A-Mole start


addi $t12, $r0, 0						# game_state = 0

# TEST
addi $a0, $r0, 5000
jal delay

while: nop
	
	whack_a_mole_start: nop
		addi $t0, $r0, 0
		beq $t0, $t12, 1
		j whack_a_mole_loop
		nop

		# set time limit off for all moles randomly
		addi $t0, $r0, 4								# set starting mole index
		addi $t1, $r0, 44								# set last mole index
		
		whack_a_mole_start_moles: nop
			jal random_time_off
			sw $v0, 0($t0)

			# TEST 
			addi $a0, $r0, 1000
			jal delay

			addi $t0, $t0, 5							# increment mole index
			blt $t1, $t0, 1								# branch if current mole index > last mole index
			j whack_a_mole_start_moles
			nop

		addi $t12, $r0, 1								# game_state = Whack-A-Mole loop
		j while

	whack_a_mole_loop: nop
		addi $t0, $r0, 1
		beq $t0, $t12, 1
		j else
		nop

		addi $t0, $r0, 0								# set starting mole index
		addi $t1, $r0, 8								# set last mole index
	
		check_current_mole: nop

			addi $a0, $t0, 0
			jal check_sensor
			addi $t2, $r0, 1
			beq $v0, $t2, 1 							# branch if sensor touched
			j sensor_not_touched
			
			sensor_touched: nop
				addi $s7, $r0, 1
				j check_current_mole

			sensor_not_touched: nop
				addi $s7, $r0, 0
				j check_current_mole
			

		j whack_a_mole_loop

	else: nop
		j while


random_time_on: nop
	
	# v0: random time on (ms)

	addi $sp, $sp, -1
	sw $ra, 0($sp)
	
	addi $a0, $r0, 500	  # min
	addi $a1, $r0, 5000   # max
	
	jal random_range
	
	lw $ra, 0($sp)
	addi $sp, $sp, 1
	
	jr $ra
	
random_time_off: nop

	# v0: random time off (ms)

	addi $sp, $sp, -1
	sw $ra, 0($sp)
	
	addi $a0, $r0, 5000
	addi $a1, $r0, 15000
	
	jal random_range 
	
	lw $ra, 0($sp)
	addi $sp, $sp, 1
	
	jr $ra	

random_range: nop

	# a0: min_time
	# a1: max_time
	# v0: random value between (min_time, max_time)

	add $s0, $r0, $a0
	add $s1, $r0, $a1

	add  $s2, $r0, $rm    # random 0-255

	sub  $s3, $s1, $s0    # map random to min/max (max - min)
	mul  $s4, $s2, $s3
	nop
	nop
	addi $s5, $r0, 255
	div  $s6, $s4, $s5
	nop
	nop	
	add  $v0, $s6, $s0    # save to v0

	jr 	 $ra 			  # return


delay: nop
	
	# a0: delay time (ms)

	add $s0, $r0, $a0
	add $s1, $r0, $r0
	addi $s2, $r0, 8333
	mul $s0, $s0, $s2
	nop
	nop

	delay_loop_begin: nop # 3 cycles/loop

		addi $s1, $s1, 1
		blt $s0, $s1, 1
		j delay_loop_begin

	delay_loop_end: nop

	jr $ra

check_sensor: nop

	# $a0: index of capacitive sensor
	# $v0: 1 - sensor touched, 0 - sensor not touched

	cap $s0, $a0
	addi $s1, $r0, 3000					# set THRESHOLD

	blt $s1, $s0, 1
	j sensor_not_touched

	touched: nop
		addi $v0, $r0, 1
		jr $ra

	not_touched: nop
		addi $v0, $r0, 0
		jr $ra

mole_is_active: nop
	
	# a0: mole index
	# v0: 1 - active, 0 - not active

	lw $s0, 1($a0)      # load state
	nop
	nop

	beq $s0, $r0, 1
	j mole_is_active_true

	mole_is_active_false: nop
		addi $v0, $r0, 0
		jr $ra

	mole_is_active_true: nop
		addi $v0, $r0, 1
		jr $ra

end: nop


