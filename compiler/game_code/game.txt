# 0-44: moles {index, state, time_elapsed, time_limit_on, time_limit_off}
# $t12 = Game State Reg,   1 = Whack-A-Mole loop, 0 = Whack-A-Mole start
# $t10 = game clock (timed)
# $t11 = score


addi $t12, $r0, 0						# game_state = 0

# TEST 
# addi $t7, $r0, 65535					# red-blue
# addi $t8, $r0, 255						# red
# addi $t9, $r0, 65280					# blue
# TEST 
# addi $s7, $r0, -1
# addi $a0, $r0, 1000
# jal delay

# TEST
addi $a0, $r0, 3000
jal delay


while: nop
	
	whack_a_mole_start: nop
		addi $t0, $r0, 0
		beq $t0, $t12, 1
		j whack_a_mole_loop
		nop

		# set time limit off for all moles randomly
		addi $t0, $r0, 0								# set starting mole index
		addi $t1, $r0, 40								# set last mole index
		addi $t2, $r0, 0								# set led index

		# test set mole active
		
		whack_a_mole_start_moles: nop
			jal random_time_off
			sw $v0, 4($t0)
			sw $t2, 0($t0)
			addi $t4, $r0, 1
			sll $t4, $t4, 20
			sw $t4, 3($t0)

			# TEST 
			# addi $a0, $r0, 500
			# jal delay

			addi $t0, $t0, 5							# increment mole index
			addi $t2, $t2, 1							# increment led index
			blt $t1, $t0, 1								# branch if current mole index > last mole index
			j whack_a_mole_start_moles
			nop

		addi $t12, $r0, 1								# game_state = Whack-A-Mole loop
		j while

	whack_a_mole_loop: nop
		addi $t0, $r0, 1
		beq $t0, $t12, 1
		j else
		nop

		addi $t0, $r0, 0								# set starting mole index [0-40], increments by 5
		addi $t1, $r0, 40								# set last mole index
		addi $t2, $r0, 0								# set starting LED index [0-8], increments by 1
		addi $t3, $r0, 9								# set last led index
	
		check_next_mole: nop
			# TEST score
			# addi $t11, $r0, 45
			# lw $t10, 0($t11)

			addi $a0, $r0, 5
			jal delay

			addi $a0, $t2, 0							# $a0 = index of led
			jal check_sensor
			addi $t4, $r0, 1
			beq $t4, $v0, 1								# branch if sensor touche
			j sensor_not_touched
			
			sensor_touched: nop
				addi $a0, $t0, 0
				jal mole_is_active
				beq $v0, $r0, 1							# branch if mole is inactive
				j mole_whacked
			
				penalty: nop
					addi $a0, $r0, -500						# penalty
					jal update_score
					addi $a0, $t0, 0
					jal deactivate_mole			
					j iterate

				mole_whacked: nop
					lw $t5, 3($t0)
					lw $t6, 2($t0)
					sub $a0, $t5, $t6
					jal update_score
					addi $a0, $t0, 0
					jal deactivate_mole			
					j iterate

			sensor_not_touched: nop

				check_time_limit_off_exceeded: nop
					addi $a0, $t0, 0
					jal time_limit_off_exceeded
					addi $t4, $r0, 1
					beq $v0, $t4, 1						# branch if time limit off exceeded
					j check_time_limit_on_exceeded

				check_mole_inactive: nop
					addi $a0, $t0, 0
					jal mole_is_active
					beq $v0, $r0, 1						# branch if mole is inactive
					j update_time_elapsed

				set_mole_active: nop
					addi $a0, $t0, 0
					jal activate_mole
					j iterate	

				check_time_limit_on_exceeded: nop
					addi $a0, $t0, 0
					jal time_limit_on_exceeded
					addi $t4, $r0, 1
					beq $v0, $t4, 1						# branch if time limit on exceeded
					j update_time_elapsed

				check_mole_active: nop
					addi $a0, $t0, 0
					jal mole_is_active
					addi $t4, $r0, 1
					beq $v0, $t4, 1						# branch if mole is active
					j update_time_elapsed
				
				set_mole_inactive: nop
					addi $a0, $t0, 0
					jal deactivate_mole
					j iterate
				
			update_time_elapsed: nop
				addi $a0, $t0, 0 
				jal increment_time_elapsed
				j iterate								# iterate to next mole

			iterate: nop
				addi $t0, $t0, 5
				addi $t2, $t2, 1
				beq $t2, $t3, 1							# branch if current index exceeds last mole index (i.e. reset)
				j check_next_mole						# DONE

			reset_index: nop
				addi $t0, $r0, 0
				addi $t2, $r0, 0
				j check_next_mole						# DONE

		j whack_a_mole_loop

	else: nop
		j while


random_time_on: nop
	
	# v0: random time on (ms)

	addi $sp, $sp, -1
	sw $ra, 0($sp)
	
	addi $a0, $r0, 500	  # min
	addi $a1, $r0, 2500     # max
	
	jal random_range
	
	lw $ra, 0($sp)
	addi $sp, $sp, 1
	
	jr $ra
	
random_time_off: nop

	# v0: random time off (ms)

	addi $sp, $sp, -1
	sw $ra, 0($sp)
	
	addi $a0, $r0, 15000
	addi $a1, $r0, 7000
	
	jal random_range 
	
	lw $ra, 0($sp)
	addi $sp, $sp, 1
	
	jr $ra	

random_color: nop
	
	# v0: random color [280, 65535]

	addi $sp, $sp, -1
	sw $ra, 0($sp)
	
	addi $a0, $r0, 280	  		# min
	addi $a1, $r0, 65535     	# max
	
	jal random_range
	
	lw $ra, 0($sp)
	addi $sp, $sp, 1
	
	jr $ra

random_range: nop

	# a0: min_time
	# a1: max_time
	# v0: random value between (min_time, max_time)

	add $s0, $r0, $a0
	add $s1, $r0, $a1

	add  $s2, $r0, $rm    # random 0-255

	sub  $s3, $s1, $s0    # map random to min/max (max - min)
	mul  $s4, $s2, $s3
	nop
	nop
	addi $s5, $r0, 255
	div  $s6, $s4, $s5
	nop
	nop	
	add  $v0, $s6, $s0    # save to v0

	jr 	 $ra 			  # return


delay: nop
	
	# a0: delay time (ms)

	add $s0, $r0, $a0
	add $s1, $r0, $r0
	addi $s2, $r0, 8333
	mul $s0, $s0, $s2
	nop
	nop

	delay_loop_begin: nop # 3 cycles/loop

		addi $s1, $s1, 1
		blt $s0, $s1, 1
		j delay_loop_begin

	delay_loop_end: nop

	jr $ra

check_sensor: nop

	# $a0: index of capacitive sensor
	# $v0: 1 - sensor touched, 0 - sensor not touched

	cap $s0, $a0
	addi $s1, $r0, 2000					# set THRESHOLD

	blt $s1, $s0, 1
	j not_touched

	touched: nop
		addi $v0, $r0, 1
		jr $ra

	not_touched: nop
		addi $v0, $r0, 0
		jr $ra

mole_is_active: nop
	
	# a0: mole index
	# v0: 1 - active, 0 - not active

	lw $s0, 1($a0)      # load state
	nop
	nop

	beq $s0, $r0, 1
	j mole_is_active_true

	mole_is_active_false: nop
		addi $v0, $r0, 0
		jr $ra

	mole_is_active_true: nop
		addi $v0, $r0, 1
		jr $ra

# reset time_elapsed, set random time_limit_on, set time_limit_off = 0, turn LED on to random color, set new state
activate_mole: nop
	
	# $a0: index of mole

	# set new time_limit_on 
	addi $sp, $sp, -2
	sw $ra, 0($sp)
	sw $a0, 1($sp)

	jal random_time_on

	lw $ra, 0($sp)
	lw $a0, 1($sp)
	addi $sp, $sp, 2
	
	sw $v0, 3($a0)									# store new time_limit_on


	# reset time_elapsed
	sw $r0, 2($a0)
	
	# set time_limit_off to very high value
	addi $s0, $r0, 1
	sll $s1, $s0, 20
	sw $s1, 4($a0)
	# sw $r0, 4($a0)

	# turn led on (random color)
	addi $sp, $sp, -2
	sw $ra, 0($sp)
	sw $a0, 1($sp)
	jal random_color
	lw $ra, 0($sp)
	lw $a0, 1($sp)
	addi $sp, $sp, 2

	lw $s0, 0($a0)					# get LED index
	nop
	nop
	nop
	led $s0, $v0					# random LED color
	nop
	nop
	nop

	# update state
	sw $s1, 1($a0)

	jr $ra




# reset time_elapsed, set random time_limit_off, , set time_limit_on = 0, turn LED off to random color
deactivate_mole: nop
	
	# $a0: index of mole

	# set new time_limit_off
	addi $sp, $sp, -2
	sw $ra, 0($sp)
	sw $a0, 1($sp)

	jal random_time_off

	lw $ra, 0($sp)
	lw $a0, 1($sp)
	addi $sp, $sp, 2
	
	sw $v0, 4($a0)					# store new time_limit_off

	# reset time_elapsed
	sw $r0, 2($a0)

	# set time_limit_on to very high value
	addi $s0, $r0, 1
	sll $s1, $s0, 20
	sw $s1, 3($a0)
	# sw $r0, 3($a0)

	# turn led off
	lw $s0, 0($a0)					# get LED index
	nop
	nop
	nop
	led $s0, $r0					# LED color (off)
	nop
	nop
	nop

	# update state
	sw $r0, 1($a0)

	jr $ra


increment_time_elapsed: nop

	# $a0: index of mole

	lw $s0, 2($a0)
	addi $s1, $s0, 35
	sw $s1, 2($a0)

	jr $ra

time_limit_on_exceeded: nop

	# a0: mole index
	# v0: 1 - exceeded, 0 - not exceeded

	lw $s0, 2($a0)			# load time_elapsed
	lw $s1, 3($a0)			# load time_limit_on

	blt $s1, $s0, 1			# if(time_limit_on < time_elapsed)
	j on_not_exceeded

	on_exceeded: nop
		
		addi $v0, $r0, 1
		jr $ra

	on_not_exceeded: nop

		addi $v0, $r0, 0
		jr $ra


time_limit_off_exceeded: nop

	# a0: mole index
	# v0: 1 - exceeded, 0 - not exceeded

	lw $s0, 2($a0)			# load time_elapsed
	lw $s1, 4($a0)			# load time_limit_off

	blt $s1, $s0, 1			# if(time_limit_off < time_elapsed)
	j off_not_exceeded

	off_exceeded: nop
		
		addi $v0, $r0, 1
		jr $ra

	off_not_exceeded: nop

		addi $v0, $r0, 0
		jr $ra

update_score: nop

	# $a0: value to add

	# addi $s0, $r0, 45				# get address 45
	# lw $s1, 0($s0)					# load score from address 45
	
	# add $s2, $s1, $a0				# score += arg0
	# sw $s2, 0($s0)					# store new score

	add $t11, $t11, $a0

	jr $ra

pause: nop
	addi $a0, $r0, 1000
	jal delay

end: nop



# Some logic for when sensor not touched:
	# check if off limit exceed 
		# check if mole is inactive
			# activate mole and iterate to next mole
		# else, update_time_elapsed and iterate to next mole
	# check if on limit exceeded
		# check if mole is active
			# deactivate mole and iterate to next mole_is_active
		# else, update_time_elapsed and iterate to next mole