# r1 = capcitor threshold
# r4 = good color
# r5 = bad color

addi $r1, $r0, 3000   # (0)

addi $r4, $r0, 65280  # blue for good dhruvs (1)
addi $r5, $r0, 255 # red for bad dhruvs (2)
addi $r26, $r0, 100000  # 100,000 cycle delay

# r2 = current index
# r3 = current capacitor value

# r10 = value for led loaded from memory
# r11 = value for timing loaded from memory
# mem 0 - 8 = led values (loaded into r10)
# mem 10 - 18 = pad timing values (loaded into r11)
# r26 = delay threshold
# r27 = delay counter
# r28 = SCORE

# capacitive sensing logic

capsense: nop

  cap $r3, $r2
  blt $r3, $r1, 1     # if the capacitor is under threshold, skip led check
  jal led             # jump to led call

  addi $r2, $r2, 1    # increment capacitor index by one
  j capsense

# increment procedures
  addi $r19,

# reset procedures
  addi $r2, $r0, 0    # reset index to 0

# led logic

led: nop

  bne $r10, $r5, 2    # hit bad dhruv
  addi $r28, $r28, 1  # UPDATE SCORE HERE (ADD)
  j jreturn

  bne $r10, $r5, 2    # hit good dhruv (sad)
  addi $r28, $r28, -1  # UPDATE SCORE HERE (SUBTRACT)
  j jreturn

  bne $r10, $r0, 2    # hit nothing (sad)
  addi $r28, $r28, -2  # UPDATE SCORE HERE (SUBTRACT)
  j jreturn

  jreturn: jr $r31   # return to caller

# delay logic

delay: nop

  addi $r27, $r27, 1  # increment by one
  blt $r26, $r27, 1   # if condition is met, continue
  j delay   # continue loop
  jr $r31   # break loop

j 0                   # loop
