// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/06/2018 13:09:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          capacitive_sensor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module capacitive_sensor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg sensor_in;
reg start;
// wires                                               
wire [31:0] count;
wire [31:0] final_count;
wire sensor_out;
wire temp_capacitor_charged;
wire [12:0] temp_charge_count;

// assign statements (if any)                          
capacitive_sensor i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.count(count),
	.final_count(final_count),
	.sensor_in(sensor_in),
	.sensor_out(sensor_out),
	.start(start),
	.temp_capacitor_charged(temp_capacitor_charged),
	.temp_charge_count(temp_charge_count)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// sensor_in
initial
begin
	sensor_in = 1'b0;
	sensor_in = #120000 1'b1;
	sensor_in = #700000 1'b0;
end 

// start
initial
begin
	start = 1'b1;
	start = #10000 1'b0;
	start = #30000 1'b1;
	start = #920000 1'b0;
end 
endmodule

