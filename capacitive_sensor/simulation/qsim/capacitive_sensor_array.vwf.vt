// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/11/2018 16:18:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          capacitive_sensor_array
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module capacitive_sensor_array_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [8:0] sensors_in;
reg start;
// wires                                               
wire and_in;
wire cap_charged;
wire [31:0] f0;
wire [31:0] f1;
wire [31:0] f2;
wire [31:0] f3;
wire [31:0] f4;
wire [31:0] f5;
wire [31:0] f6;
wire [31:0] f7;
wire [31:0] f8;
wire sens_out;
wire sensors_out;

// assign statements (if any)                          
capacitive_sensor_array i1 (
// port map - connection between master ports and signals/registers   
	.and_in(and_in),
	.cap_charged(cap_charged),
	.clock(clock),
	.f0(f0),
	.f1(f1),
	.f2(f2),
	.f3(f3),
	.f4(f4),
	.f5(f5),
	.f6(f6),
	.f7(f7),
	.f8(f8),
	.sens_out(sens_out),
	.sensors_in(sensors_in),
	.sensors_out(sensors_out),
	.start(start)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// sensors_in[ 8 ]
initial
begin
	sensors_in[8] = 1'b0;
	sensors_in[8] = #60000 1'b1;
	sensors_in[8] = #840000 1'b0;
end 
// sensors_in[ 7 ]
initial
begin
	sensors_in[7] = 1'b0;
	sensors_in[7] = #80000 1'b1;
	sensors_in[7] = #820000 1'b0;
end 
// sensors_in[ 6 ]
initial
begin
	sensors_in[6] = 1'b0;
	sensors_in[6] = #100000 1'b1;
	sensors_in[6] = #800000 1'b0;
end 
// sensors_in[ 5 ]
initial
begin
	sensors_in[5] = 1'b0;
	sensors_in[5] = #120000 1'b1;
	sensors_in[5] = #780000 1'b0;
end 
// sensors_in[ 4 ]
initial
begin
	sensors_in[4] = 1'b0;
	sensors_in[4] = #150000 1'b1;
	sensors_in[4] = #660000 1'b0;
end 
// sensors_in[ 3 ]
initial
begin
	sensors_in[3] = 1'b0;
	sensors_in[3] = #160000 1'b1;
	sensors_in[3] = #230000 1'b0;
end 
// sensors_in[ 2 ]
initial
begin
	sensors_in[2] = 1'b0;
	sensors_in[2] = #80000 1'b1;
	sensors_in[2] = #360000 1'b0;
end 
// sensors_in[ 1 ]
initial
begin
	sensors_in[1] = 1'b0;
	sensors_in[1] = #130000 1'b1;
	sensors_in[1] = #740000 1'b0;
end 
// sensors_in[ 0 ]
initial
begin
	sensors_in[0] = 1'b0;
	sensors_in[0] = #100000 1'b1;
	sensors_in[0] = #710000 1'b0;
end 

// start
initial
begin
	start = 1'b1;
	start = #10000 1'b0;
	start = #20000 1'b1;
	start = #950000 1'b0;
end 
endmodule

