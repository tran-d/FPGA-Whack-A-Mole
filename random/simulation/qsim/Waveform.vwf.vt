// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/12/2018 18:33:25"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          skeleton
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module skeleton_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] seed0;
reg [7:0] seed1;
// wires                                               
wire [7:0] data0;
wire [7:0] data1;

// assign statements (if any)                          
skeleton i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.data0(data0),
	.data1(data1),
	.seed0(seed0),
	.seed1(seed1)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// seed0[ 7 ]
initial
begin
	seed0[7] = 1'b1;
	seed0[7] = #200000 1'b0;
	seed0[7] = #100000 1'b1;
	seed0[7] = #200000 1'b0;
	seed0[7] = #400000 1'b1;
end 
// seed0[ 6 ]
initial
begin
	seed0[6] = 1'b0;
	seed0[6] = #300000 1'b1;
	seed0[6] = #200000 1'b0;
	seed0[6] = #300000 1'b1;
	seed0[6] = #100000 1'b0;
end 
// seed0[ 5 ]
initial
begin
	seed0[5] = 1'b1;
	seed0[5] = #100000 1'b0;
	seed0[5] = #100000 1'b1;
	seed0[5] = #100000 1'b0;
	seed0[5] = #300000 1'b1;
	seed0[5] = #300000 1'b0;
end 
// seed0[ 4 ]
initial
begin
	seed0[4] = 1'b1;
	seed0[4] = #400000 1'b0;
	seed0[4] = #100000 1'b1;
end 
// seed0[ 3 ]
initial
begin
	seed0[3] = 1'b0;
	seed0[3] = #100000 1'b1;
	seed0[3] = #100000 1'b0;
	seed0[3] = #100000 1'b1;
	seed0[3] = #100000 1'b0;
	seed0[3] = #200000 1'b1;
end 
// seed0[ 2 ]
initial
begin
	seed0[2] = 1'b1;
	seed0[2] = #200000 1'b0;
	seed0[2] = #200000 1'b1;
	seed0[2] = #100000 1'b0;
	seed0[2] = #300000 1'b1;
end 
// seed0[ 1 ]
initial
begin
	seed0[1] = 1'b1;
	seed0[1] = #300000 1'b0;
	seed0[1] = #200000 1'b1;
	seed0[1] = #200000 1'b0;
	seed0[1] = #100000 1'b1;
	seed0[1] = #100000 1'b0;
end 
// seed0[ 0 ]
initial
begin
	seed0[0] = 1'b1;
	seed0[0] = #100000 1'b0;
	seed0[0] = #200000 1'b1;
	seed0[0] = #100000 1'b0;
	seed0[0] = #200000 1'b1;
	seed0[0] = #200000 1'b0;
	seed0[0] = #100000 1'b1;
end 
// seed1[ 7 ]
initial
begin
	seed1[7] = 1'b0;
	seed1[7] = #100000 1'b1;
	seed1[7] = #100000 1'b0;
	seed1[7] = #300000 1'b1;
	seed1[7] = #100000 1'b0;
	seed1[7] = #100000 1'b1;
	seed1[7] = #100000 1'b0;
	seed1[7] = #100000 1'b1;
end 
// seed1[ 6 ]
initial
begin
	seed1[6] = 1'b1;
	seed1[6] = #500000 1'b0;
	seed1[6] = #100000 1'b1;
	seed1[6] = #100000 1'b0;
	seed1[6] = #100000 1'b1;
	seed1[6] = #100000 1'b0;
end 
// seed1[ 5 ]
initial
begin
	seed1[5] = 1'b1;
	seed1[5] = #100000 1'b0;
	seed1[5] = #200000 1'b1;
	seed1[5] = #200000 1'b0;
	seed1[5] = #300000 1'b1;
	seed1[5] = #100000 1'b0;
end 
// seed1[ 4 ]
initial
begin
	seed1[4] = 1'b0;
	seed1[4] = #200000 1'b1;
	seed1[4] = #200000 1'b0;
	seed1[4] = #100000 1'b1;
	seed1[4] = #200000 1'b0;
end 
// seed1[ 3 ]
initial
begin
	seed1[3] = 1'b1;
	seed1[3] = #200000 1'b0;
	seed1[3] = #100000 1'b1;
	seed1[3] = #300000 1'b0;
	seed1[3] = #300000 1'b1;
end 
// seed1[ 2 ]
initial
begin
	seed1[2] = 1'b1;
	seed1[2] = #200000 1'b0;
	seed1[2] = #200000 1'b1;
	seed1[2] = #100000 1'b0;
	seed1[2] = #200000 1'b1;
	seed1[2] = #100000 1'b0;
end 
// seed1[ 1 ]
initial
begin
	seed1[1] = 1'b1;
	seed1[1] = #100000 1'b0;
	seed1[1] = #200000 1'b1;
	seed1[1] = #400000 1'b0;
	seed1[1] = #100000 1'b1;
end 
// seed1[ 0 ]
initial
begin
	seed1[0] = 1'b0;
	seed1[0] = #200000 1'b1;
	seed1[0] = #200000 1'b0;
	seed1[0] = #300000 1'b1;
	seed1[0] = #200000 1'b0;
end 
endmodule

