// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/19/2018 20:54:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          random8_cell
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module random8_cell_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] seed;
// wires                                               
wire [7:0] data;

// assign statements (if any)                          
random8_cell i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.data(data),
	.seed(seed)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// seed[ 7 ]
initial
begin
	seed[7] = 1'b1;
	seed[7] = #200000 1'b0;
	seed[7] = #200000 1'b1;
	seed[7] = #200000 1'b0;
	seed[7] = #100000 1'b1;
	seed[7] = #100000 1'b0;
	seed[7] = #100000 1'b1;
end 
// seed[ 6 ]
initial
begin
	seed[6] = 1'b1;
	seed[6] = #100000 1'b0;
	seed[6] = #100000 1'b1;
	seed[6] = #300000 1'b0;
	seed[6] = #300000 1'b1;
	seed[6] = #100000 1'b0;
end 
// seed[ 5 ]
initial
begin
	seed[5] = 1'b0;
	seed[5] = #200000 1'b1;
	seed[5] = #300000 1'b0;
	seed[5] = #100000 1'b1;
	seed[5] = #300000 1'b0;
end 
// seed[ 4 ]
initial
begin
	seed[4] = 1'b0;
	seed[4] = #100000 1'b1;
	seed[4] = #100000 1'b0;
	seed[4] = #300000 1'b1;
	seed[4] = #200000 1'b0;
	seed[4] = #100000 1'b1;
end 
// seed[ 3 ]
initial
begin
	seed[3] = 1'b0;
	seed[3] = #100000 1'b1;
	seed[3] = #100000 1'b0;
	seed[3] = #100000 1'b1;
	seed[3] = #300000 1'b0;
	seed[3] = #200000 1'b1;
end 
// seed[ 2 ]
initial
begin
	seed[2] = 1'b1;
	seed[2] = #300000 1'b0;
	seed[2] = #200000 1'b1;
	seed[2] = #200000 1'b0;
	seed[2] = #200000 1'b1;
end 
// seed[ 1 ]
initial
begin
	seed[1] = 1'b0;
	seed[1] = #500000 1'b1;
	seed[1] = #400000 1'b0;
end 
// seed[ 0 ]
initial
begin
	seed[0] = 1'b1;
	seed[0] = #200000 1'b0;
	seed[0] = #100000 1'b1;
	seed[0] = #400000 1'b0;
	seed[0] = #100000 1'b1;
	seed[0] = #100000 1'b0;
end 
endmodule

